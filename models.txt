

skip
=====================
first name - char
last name - char
age - int

@full name
@check duplicate address/phone/relative


address
====================
skip - fk
last known - bool
street address - char
city - char
state - char (choices)
zip code - char

@prettify address


phone (skip's phone)
====================
number - char
last_known - bool
skip - fk

@unified format


relative
====================
first name - char
last name - char
skip - mtm
alive - bool
potential MMN - bool
phone - char null=True

@filter by last name


company
===================
name - char
skip - fk? mtm?
skip is owner - bool
phone - char null=True
website - url null=True


website
====================
company name - char
type - char (choices*)
url - url
error_count - int default=0

@encountered error, error_count +=1
@too many errors
    -scraper will not run because it has failed too many times
    -"too many" will be pre-defined number in config.py

*url types will include:
    -urls we must submit info to
    -base urls for scraping


bank
====================
name - char
difficulty - char (choices)


bank phone
====================
bank - fk
phone - char max_length=255
error_count - int default=0

@encountered error
    -increase error_count += 1
@too many errors
    -similar functionality to website method

bank account
====================
account num - char
bank - fk
skip - mtm
dfd/dla - date object



credit card
====================
number - int or char
skip - fk
limit - int null=True
expiry - char null=True



Error handling:

corrupt scrape entry
====================
scraper - fk
key - char
value[:255] - char max_length=255
date created - datetime













